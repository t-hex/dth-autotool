eval(include( "dth_at_exporter" ));

function ExecuteSteps( aSteps ) {
    for ( var i=0; i<aSteps.length; i+=1 ) {
        aSteps[ i ]();
        processEvents();
        if ( progressIsCancelled() ) { return false; }
    }
    return true;
}

/*********************************************************************/
// Module execution code block
(function( aArgs ){
    var sConfigFilePath = "./project.config.json"
    if( aArgs ) {
        Assert.IsArray( aArgs );
        if( aArgs.length > 0 ) {
            sConfigFilePath = Cast.AsNotNullOrEmpty( aArgs[ 0 ] );
        }
    }

    var oDthAutoToolConfig = new DthAutoToolConfiguration( sConfigFilePath );

    if( oDthAutoToolConfig.editMode.isEnabled ) {
        print( "Edit mode enabled. Loading exportable: \"%1\" without triggering export".arg( oDthAutoToolConfig.editMode.exportableName ) );

        var oExportPlan = oDthAutoToolConfig.build( oDthAutoToolConfig.editMode.exportableName );
        var oDthAutoToolExporter = new DthAutoToolExporter( oExportPlan, oDthAutoToolConfig.dthAutoToolConfig, oDthAutoToolConfig.exportSettings );

        oDthAutoToolExporter.prepareScene();
        oDthAutoToolExporter.loadCharacter();
        if( oDthAutoToolConfig.editMode.withClothing )
        {
            oDthAutoToolExporter.loadClothing( oDthAutoToolConfig.editMode.clothingName );
        }
        if( oDthAutoToolConfig.editMode.withGrooming )
        {
            oDthAutoToolExporter.loadGrooming( oDthAutoToolConfig.editMode.groomingName, false );
        }
        oDthAutoToolExporter.loadMorphs();
        
        DzHelpers.ShowPane( "DzViewportMgrPane" );
    } else {
        var aExportableKeys = oDthAutoToolConfig.exportables.keys();
        var aExportPlans = []
        var iTotalExportSteps = 0;

        for( var i=0; i<aExportableKeys.length; i+=1 )
        {
            var oExportable = oDthAutoToolConfig.exportables.get( aExportableKeys[ i ] );
            var oExportPlan = oDthAutoToolConfig.build( oExportable.name );
            if( !oExportPlan ) { continue; }
            aExportPlans.push( oExportPlan );

            if( !oDthAutoToolConfig.exportSettings.skipBaseModel ) { iTotalExportSteps += 1; }
            iTotalExportSteps += oExportPlan.clothing.length;
        }

        startProgress( text( "DTH-AutoTool export progress" ), iTotalExportSteps, true, true );
        processEvents();

        for( var i=0; i<aExportPlans.length; i+=1 )
        {
            var oExportPlan = aExportPlans[ i ];

            var sOutputName = oExportPlan.name
            App.statusLine( sOutputName );

            var oDthAutoToolExporter = new DthAutoToolExporter( oExportPlan, oDthAutoToolConfig.dthAutoToolConfig, oDthAutoToolConfig.exportSettings );

            if( !oDthAutoToolConfig.exportSettings.skipBaseModel ) {
                // export base character only
                if( !ExecuteSteps( [
                    function() { oDthAutoToolExporter.prepareScene(); },
                    function() { oDthAutoToolExporter.loadCharacter(); },
                    function() { oDthAutoToolExporter.loadMorphs(); },
                    function() { oDthAutoToolExporter.startExport( 1, true, true ); },
                    function() { oDthAutoToolExporter.copyResult( sOutputName ); }
                ] ) ) { break; }
                
                stepProgress( 1 );
            }

            // if clothings defined export character with each clothing
            var aClothingKeys = oDthAutoToolExporter.clothings;
            if( aClothingKeys.length > 0 ) {
                for( var j=0; j<aClothingKeys.length; j+=1 ) {
                    if( !ExecuteSteps( [
                        function() { oDthAutoToolExporter.prepareScene(); },
                        function() { oDthAutoToolExporter.loadCharacter(); },
                        function() { oDthAutoToolExporter.loadClothing( aClothingKeys[ j ] ); },
                        function() { oDthAutoToolExporter.loadMorphs(); },
                        function() { oDthAutoToolExporter.startExport( 1, true, true ); },
                        function() { oDthAutoToolExporter.copyResult( "%1 - %2".arg( sOutputName ).arg( aClothingKeys[ j ] ) ); }
                    ] ) ) { break; }
                }
            }

            // if groomings defined each grooming set
            var aGroomingKeys = oDthAutoToolExporter.groomings;
            if( aGroomingKeys.length > 0 ) {
                for( var j=0; j<aGroomingKeys.length; j+=1 ) {
                    if( !ExecuteSteps( [
                        function() { oDthAutoToolExporter.prepareScene(); },
                        function() { oDthAutoToolExporter.loadCharacter(); },
                        function() { oDthAutoToolExporter.loadGrooming( aGroomingKeys[ j ], true ); },
                        function() { oDthAutoToolExporter.startExport( 0, false, true ); },
                        function() { oDthAutoToolExporter.copyResult( "%1 - %2".arg( sOutputName ).arg( aGroomingKeys[ j ] ) ); }
                    ] ) ) { break; }
                }
            }
            
            stepProgress( 1 );
        }

        if( progressIsCancelled() ) {
            App.statusLine( text( "DTH-AutoTool export progress cancelled" ) );
            print( "DTH-AutoTool export progress cancelled" );
        }
        finishProgress();
    }
})();